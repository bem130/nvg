function init() {
    return true;
}

const val = {
    E: Math.E,
    LN2: Math.LN2,
    LN10: Math.LN10,
    LOG2E: Math.LOG2E,
    LOG10E: Math.LOG10E,
    PI: Math.PI,
    SQRT1_2: Math.SQRT1_2,
    SQRT2: Math.SQRT2,
    abs: (_,args)=>{return Math.abs(...args)},
    acos: (_,args)=>{return Math.acos(...args)},
    acosh: (_,args)=>{return Math.acosh(...args)},
    asin: (_,args)=>{return Math.asin(...args)},
    asinh: (_,args)=>{return Math.asinh(...args)},
    atan: (_,args)=>{return Math.atan(...args)},
    atan2: (_,args)=>{return Math.atan2(...args)},
    atanh: (_,args)=>{return Math.atanh(...args)},
    cbrt: (_,args)=>{return Math.cbrt(...args)},
    ceil: (_,args)=>{return Math.ceil(...args)},
    clz32: (_,args)=>{return Math.clz32(...args)},
    cos: (_,args)=>{return Math.cos(...args)},
    cosh: (_,args)=>{return Math.cosh(...args)},
    exp: (_,args)=>{return Math.exp(...args)},
    expm1: (_,args)=>{return Math.expm1(...args)},
    floor: (_,args)=>{return Math.floor(...args)},
    fround: (_,args)=>{return Math.fround(...args)},
    hypot: (_,args)=>{return Math.hypot(...args)},
    imul: (_,args)=>{return Math.imul(...args)},
    log: (_,args)=>{return Math.log(...args)},
    log1p: (_,args)=>{return Math.log1p(...args)},
    log2: (_,args)=>{return Math.log2(...args)},
    log10: (_,args)=>{return Math.log10(...args)},
    max: (_,args)=>{return Math.max(...args)},
    min: (_,args)=>{return Math.min(...args)},
    pow: (_,args)=>{return Math.pow(...args)},
    random: (_,args)=>{return Math.random(...args)},
    round: (_,args)=>{return Math.round(...args)},
    sign: (_,args)=>{return Math.sign(...args)},
    sin: (_,args)=>{return Math.sin(...args)},
    sinh: (_,args)=>{return Math.sinh(...args)},
    sqrt: (_,args)=>{return Math.sqrt(...args)},
    tan: (_,args)=>{return Math.tan(...args)},
    tanh: (_,args)=>{return Math.tanh(...args)},
    trunc: (_,args)=>{return Math.trunc(...args)},
    normalize: (_,args)=>{return Math.min(Math.max(args,0),1)},
}


export {init as init,val as val};